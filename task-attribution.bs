<pre class=metadata>
Title: Task Attribution
Status: CG-DRAFT
Shortname:task-attribution
Group: wicg 
Level: none
Editor: Yoav Weiss, Google https://google.com, yoav@yoav.ws, w3cid 58673

URL: https://wicg.github.io/soft-navigation/task-attribution.html
Repository: https://github.com/WICG/soft-navigation
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/soft-navigation-heuristics
Abstract: This document defines infrastructure to enable browsers to know which tasks are ancestors for other tasks.
Default Highlight: js
Complain About: accidental-2119 yes
</pre>

<pre class=anchors>
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML;
    type: dfn; url: #queue-a-task; text: queueing a task;
</pre>

Introduction {#sec-intro}
=====================

<div class="non-normative">

<em>This section is non-normative.</em>

The user agentâ€™s event loop is continuously running tasks, as well as microtasks.
Being able to keep track of which task initiated which can be valuable in multiple cases:
* Enable user agents to create heuristics that rely on causal link between one operation (e.g. a user initiated click event) and another (e,g. a DOM modification).
* Enable user agents to make prioritization (of tasks as well as resource loading) "inheritable", and e.g. ensure that low-priority scripts cannot queue high-priority tasks.
* Enable causal user activation delegaion.
* Enable accumulating knowledge of resource loading dependency chains, and enable developers to draw insights from them.

This specification outlines a mechanism that would enable user agents to deduce that information, and use it in various other algorithms that might be used for web exposed features.
However, this specification does not define a web exposed feature in and of itself.

ISSUE: Should we discuss potential conncetion with AsyncContext and its use cases?

</div>

Task Attribution {#sec-task-attribution}
========================

High-level design {#sec-design}
------------------------
The general principle behind task attribution is quite simple:
* Script execution creates a task scope
* Tasks and microtasks that are queued during a task scope's lifetime are considered its descendents.
* Certain registered callbacks get an explicit parent task defined. (e.g. the task that registered the callback)

Each task maintains a connection to its parent task, enabling an implicit data structure that enables querying a task to find if another, specific one is its ancestor.

Algorithms {#sec-algorithms}
-------------------------

### Task scope {#sec-task-scope}


A <dfn id=concept-task-scope>Task scope</dfn> is formally defined as a structure.
A <a>Task scope</a> has an <dfn for="task scope">ID</dfn>, an [implementation defined] [number], representing a unique identifier.

A <a>Task scope</a> has <dfn>task continuation data</dfn>, a struct.
A <a>Task scope</a> has a <a>task</>.



### Task scope stack {#sec-task-scope-stack}
A <dfn>task scope stack</dfn> is a [[stack ]] of <a>Task scopes</a>

When a new task scope is created:
* Assign a new ID to the task scope
* Push it in the event loop's stack.
* Push it into the continuartion data

When pop task scope:
* pop the latest
* Reset the continuation data to the previous one

### Track task queueing {#sec-track-task-queueing}

### Is ancestor {#sec-is-ancestor}

### Is ancestor in set {#sec-is-ancestor-in-set}

#### Get current task ID {#sec-current-task-id}

HTML integration {#sec-integration}
-------------------------

The [[event loop]] has a <a>task scope stack</a>.

In {Execute the script element}, add an initial step:
* Create a new task scope.

add a terminating step:
* Pop task scope

A [[task]] has a <a>task attibution ID</a>, initially unset.
A [[task]] has a <a>task> <dfn>parent task</dfn>, initially unset.

In queue a task:
* set the task's parent to the latest in the event loop
* create a new task scope
* at the end, pop a task scope

// TODO: handle microtasks
// TODO: handle timeouts
// TODO: handle postmessages
// TODO: handle same document navigations
// TODO: other cases??


Security & privacy considerations {#priv-sec}
===============================================
As this infrastructure doesn't directly expose any data to the web, it doesn't have any privacy and security implications.
Web exposed specifications that rely on this infrastructure might have such implications. As such, they need to be individually examined and have those implications outlined.

