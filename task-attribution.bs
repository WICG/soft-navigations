<pre class=metadata>
Title: Task Attribution
Status: CG-DRAFT
Shortname:task-attribution
Group: wicg 
Level: none
Editor: Yoav Weiss, Google https://google.com, yoav@yoav.ws, w3cid 58673

URL: https://wicg.github.io/soft-navigation/task-attribution.html
Repository: https://github.com/WICG/soft-navigation
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/soft-navigation-heuristics
Abstract: This document defines infrastructure to enable browsers to know which tasks are ancestors for other tasks.
Default Highlight: js
Complain About: accidental-2119 yes
</pre>

<pre class=anchors>
urlPrefix: https://html.spec.whatwg.org/C; spec: HTML;
    type: dfn; url: #execute-the-script-element; text: execute the script element;
</pre>
<pre class=link-defaults>
</pre>

Introduction {#sec-intro}
=====================

<div class="non-normative">

<em>This section is non-normative.</em>

The user agentâ€™s event loop is continuously running tasks, as well as microtasks.
Being able to keep track of which task initiated which can be valuable in multiple cases:
  * Enable user agents to create heuristics that rely on causal link between one operation (e.g. a user initiated click event) and another (e,g. a DOM modification).
  * Enable user agents to make prioritization (of tasks as well as resource loading) "inheritable", and e.g. ensure that low-priority scripts cannot queue high-priority tasks.
  * Enable causal user activation delegaion.
  * Enable accumulating knowledge of resource loading dependency chains, and enable developers to draw insights from them.

This specification outlines a mechanism that would enable user agents to deduce that information, and use it in various other algorithms that might be used for web exposed features.
However, this specification does not define a web exposed feature in and of itself.

</div>
ISSUE: Should we discuss potential conncetion with AsyncContext and its use cases?

Task Attribution {#sec-task-attribution}
========================

High-level design {#sec-design}
------------------------
The general principle behind task attribution is quite simple:
  * Script execution creates a task scope
  * Tasks and microtasks that are queued during a task scope's lifetime are considered its descendents.
  * Certain registered callbacks get an explicit parent task defined. (e.g. the task that registered the callback)

Each task maintains a connection to its parent task, enabling an implicit data structure that enables querying a task to find if another, specific one is its ancestor.

Algorithms {#sec-algorithms}
-------------------------

### Task scope {#sec-task-scope}


A <dfn id=concept-task-scope>task scope</dfn> is formally defined as a structure.

A [=task scope=] has <dfn for="task scope">task continuation data</dfn>, a struct.

A [=task scope=] has a <dfn for="task scope">task</dfn>, a [=/task=].



### Task scope stack {#sec-task-scope-stack}
A <dfn>task scope stack</dfn> is a [=stack=] of <a>task scopes</a>.

To <dfn>create a task scope</dfn>, given |task|, a [=/task=], do the following:
  1. Let |scope| be a new [=task scope=].
  1. Set |task|'s [=task attribution ID=] with an [=implementation-defined=] unique value.
  1. Set |scope|'s [=task continuation data=] to SOMETHING!! Push the continuation data on the isolate???
  1. Set |scope|'s [=task scope/task=] to |task|. If |task| is nullptr, create one???
  1. Push |scope| to the [=relevant agent=]'s [=agent/event loop=]'s [=task scope stack=].

To <dfn>tear down a task scope</dfn>, do the following:
  1. Pop |scope| from the [=relevant agent=]'s [=agent/event loop=]'s [=task scope stack=]
  1. Set the isolate's continuation data thing to the one at the top of the stack

### Is ancestor {#sec-is-ancestor}
To <dfn export>check ancestor for task</dfn>, given |ancestor id|, a [=task attribution ID=], run the following:
  1. Let |task| be the result of [=get current task=].
  1. While true:
    1. Let |id| be|task|'s [=task attribution ID=].
    1. If |id| is unset, return false.
    1. If |id| equals |ancestor id|, return true.
    1. Set |task| to |task|'s [=parent task=].


### Is ancestor in set {#sec-is-ancestor-in-set}

To <dfn export>check ancestor set for task</dfn>, given |ancestor id set|, a [=task attribution ID=] [=/set=], run the following:
  1. Let |task| be the result of [=get current task=].
  1. While true:
    1. Let |id| be |task|'s [=task attribution ID=] if |task| is set, or be unset otherwise.
    1. If |id| is unset, return false.
    1. If |ancestor id set| [=contains=] |id|, return true.
    1. Set |task| to |task|'s [=parent task=].

#### Get current task {#sec-current-task}
To <dfn export>get current task</dfn>, run the following steps:
  1. Let |scope| be the result of [=popping=] the [=relevant agent=]'s [=agent/event loop=]'s [=task scope stack=].
  1. [=stack/Push=] |scope| to the [=relevant agent=]'s [=agent/event loop=]'s [=task scope stack=].
  1. Return |scope|'s [=task scope/task=].

Note: The first 2 steps here really need to be a peek operation.

#### Get current task ID {#sec-current-task-id}
To <dfn export>get current task id</dfn>, run the following steps:
  1. Let |task| be the result of [=get current task=].
  1. Return |task|'s [=task attribution ID=].

HTML integration {#sec-integration}
-------------------------

Each [=/event loop=] has a <a>task scope stack</a>.

In [=Execute the script element=], add initial steps:
  1. Let |task| be a new [=/task=].
  1. [=Create a task scope=] with |task|.

Add a terminating step:
  1. [=Tear down a task scope=]

A [=/task=] has a <dfn for="task">task attribution ID</dfn>, an [=implementation-defined=] value,
representing a unique identifier. It is initially unset.

A [=/task=] has a <dfn for="task">parent task</dfn>, a [=/task=], initially unset.

Note: Should we move that info into a "task attribution info" structure and only link those?

In [=queue a task=]:

Add these steps after step 3, "Let task be a new task":
  1. Set |task|'s [=parent task=] to the result of [=get current task ID=].
  2. [=Create a task scope=] with |task|.

Add a terminating step:
  1. [=Tear down a task scope=]

TODO: handle microtasks
TODO: handle timeouts
TODO: handle postmessages
TODO: handle same document navigations
TODO: other cases??


Security & privacy considerations {#priv-sec}
===============================================
As this infrastructure doesn't directly expose any data to the web, it doesn't have any privacy and security implications.
Web exposed specifications that rely on this infrastructure might have such implications. As such, they need to be individually examined and have those implications outlined.

